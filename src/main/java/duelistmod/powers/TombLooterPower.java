package duelistmod.powers;

import com.badlogic.gdx.graphics.Texture;
import com.evacipated.cardcrawl.mod.stslib.powers.abstracts.TwoAmountPower;
import com.megacrit.cardcrawl.cards.DamageInfo;
import com.megacrit.cardcrawl.core.*;
import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
import com.megacrit.cardcrawl.localization.PowerStrings;

import duelistmod.DuelistMod;
import duelistmod.abstracts.DuelistCard;
import duelistmod.helpers.Util;
import duelistmod.variables.Strings;

// why would I do it like this? because

public class TombLooterPower extends TwoAmountPower 
{
    public AbstractCreature source;
    public static final String POWER_ID = DuelistMod.makeID("TombLooterPower");
    private static final PowerStrings powerStrings = CardCrawlGame.languagePack.getPowerStrings(POWER_ID);
    public static final String NAME = powerStrings.NAME;
    public static final String[] DESCRIPTIONS = powerStrings.DESCRIPTIONS;
    public static final String IMG = DuelistMod.makePath(Strings.ENERGY_TREASURE_POWER);
    
    private boolean isNotEssenceVersion = true;		// True when this is not created from Aknamkanon's Essence relic
    public int goldLimit = 50;						// Max amount of gold possible to gain from this power
    public int goldGainedThisCombat = 0;			// Amount of gold gained so far by this power

    
    // General case constructor - generic form of power that is generated by most sources
    public TombLooterPower(final AbstractCreature owner, int newAmount) 
    {
        this.name = NAME;
        this.ID = POWER_ID;
        this.owner = owner;       
        this.type = PowerType.BUFF;
        this.isTurnBased = false;
        this.img = new Texture(IMG);
        this.amount = 15 + newAmount;
        this.amount2 = goldLimit;
        this.updateDescription();
    }
    
    // Special case constructor - used by Aknamkanon's Essence relic to modify end of turn and onAttack behavior, can be used to set gold limit to different nums
    public TombLooterPower(final AbstractCreature owner, int newAmount, int goldLimit, boolean fromEssenceRelic)
    {
    	if (fromEssenceRelic)
    	{
	        this.name = NAME;
	        this.ID = POWER_ID;
	        this.owner = owner;       
	        this.type = PowerType.BUFF;
	        this.isTurnBased = false;
	        this.img = new Texture(IMG);
	        this.amount = newAmount;
	        this.amount2 = goldLimit;
	        this.goldLimit = goldLimit;
	        this.isNotEssenceVersion = false;
	        this.updateDescription();
    	}
    	else
    	{
    		this.name = NAME;
            this.ID = POWER_ID;
            this.owner = owner;       
            this.type = PowerType.BUFF;
            this.isTurnBased = false;
            this.img = new Texture(IMG);
            this.amount = 15 + newAmount;
            this.goldLimit = goldLimit;
            this.amount2 = goldLimit;
            this.updateDescription();
    	}
    }

    @Override
	public void updateDescription() 
    {
    	if (this.amount < 0) { this.amount = 0; }
    	if (this.amount2 < 0) { this.amount2 = 0; }
    	if (this.amount > 0 && this.goldGainedThisCombat >= this.goldLimit) { this.amount = 0; }
        this.description = DESCRIPTIONS[0] + this.amount + DESCRIPTIONS[1];
    }
    
    // If essence version:
    	// End of turn do nothing
    // Otherwise:
    	// Roll 1-10, on 1-5 reduce gold gain amount by 1/3 current amount, on 7 increase gold gain by 10, on 8-10 do nothing
    @Override
    public void atEndOfTurn(boolean isPlayer)
    {
    	if (this.isNotEssenceVersion && this.amount > 0)
    	{	    	
    		int roll = AbstractDungeon.cardRandomRng.random(1, 10);
    		if (roll < 6)
    		{
	    		this.amount -= (int)(this.amount/3.0f); 
	    		if (this.amount < 1) 
	    		{ 
	    			DuelistCard.removePower(this, AbstractDungeon.player);
	    			
	    		} 
    		}
    		else if (roll == 7)
    		{
    			this.amount += 10;
    			if (this.goldGainedThisCombat < this.goldLimit) { this.flash(); }
    		}
    		
    		Util.log("theDuelist:EnergyTreasurePower:atEndOfTurn() ---> roll: " + roll);     	
    	}
    	updateDescription();
    } 
    
    // 1st check - Check for current summons == max summons, player actually has summons, and gold gain is still within limits
    
    // If 1st check and gold gain amount is positive, gain the right amount of gold
    // If this is the essence version, then also reduce the gold gain amount by 3
    
    // If gold gain wasn't positive but we did beat the 1st check and this is the essence version...
    ///... then roll 33% to see if we will increase the gold gain amount by 1-3
    @Override
    public void onAttack(DamageInfo info, int damageAmount, AbstractCreature target)
    {
    	if (DuelistCard.getSummons(AbstractDungeon.player) == DuelistCard.getMaxSummons(AbstractDungeon.player) && AbstractDungeon.player.hasPower(SummonPower.POWER_ID) && this.goldGainedThisCombat < this.goldLimit) 
    	{ 
    		if (this.amount > 0)
    		{
    			if (this.goldGainedThisCombat + this.amount < this.goldLimit)
    			{
	    			AbstractDungeon.player.gainGold(this.amount); 
	    			this.goldGainedThisCombat += this.amount;
	    			this.amount2 -= this.amount;
    			}
    			else
    			{
    				AbstractDungeon.player.gainGold(this.amount2); 
	    			this.goldGainedThisCombat += this.amount2;
	    			this.amount2 = 0;
    			}
	    		if (!this.isNotEssenceVersion) { this.amount -= 3; }
	    		updateDescription();
    		}
    		else if (!this.isNotEssenceVersion)
    		{
    			int roll = AbstractDungeon.cardRandomRng.random(1, 3);
    			if (roll == 1)
    			{
    				this.flash();
    				this.amount += AbstractDungeon.cardRandomRng.random(1, 3);
    				updateDescription();
    			}
    		}
    	}
    }
}
